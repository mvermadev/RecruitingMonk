{"ast":null,"code":"import { combineReducers, createStore } from \"redux\";\nimport authReducer from './authReducer'; // import other reducers\n\nconst rootReducer = combineReducers({\n  // Key Value map of reducers\n  authUser: authReducer\n}); //Store\n\nconst store = createStore(rootReducer); //to update the state \n\nstore.subscribe(() => {\n  for (var prop in store.getState()) {\n    console.warn('my redux: ' + prop[store.getState()]);\n  }\n}); //Action for state\n\nconst addUser = text => {\n  return {\n    type: \"SET_AUTH_TOKEN\",\n    payload: {\n      auth: text\n    }\n  };\n}; //assigning the new value to the state\n\n\nstore.dispatch(addUser('1123'));\nexport default rootReducer;","map":{"version":3,"sources":["/Users/manishverma/Desktop/Apple/Web/Office/RecruitingMonk/F-End/src/redux/reducers/index.js"],"names":["combineReducers","createStore","authReducer","rootReducer","authUser","store","subscribe","prop","getState","console","warn","addUser","text","type","payload","auth","dispatch"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAChC;AACAI,EAAAA,QAAQ,EAAEF;AAFsB,CAAD,CAAnC,C,CAKA;;AACA,MAAMG,KAAK,GAAGJ,WAAW,CAACE,WAAD,CAAzB,C,CAEG;;AACAE,KAAK,CAACC,SAAN,CAAgB,MAAI;AACnB,OAAI,IAAIC,IAAR,IAAgBF,KAAK,CAACG,QAAN,EAAhB,EACA;AACIC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAcH,IAAI,CAACF,KAAK,CAACG,QAAN,EAAD,CAA/B;AACH;AACJ,CALE,E,CAOC;;AACJ,MAAMG,OAAO,GAAGC,IAAI,IAAE;AAClB,SAAM;AACFC,IAAAA,IAAI,EAAE,gBADJ;AAEFC,IAAAA,OAAO,EAAE;AAACC,MAAAA,IAAI,EAAEH;AAAP;AAFP,GAAN;AAIH,CALD,C,CAOI;;;AACJP,KAAK,CAACW,QAAN,CAAeL,OAAO,CAAC,MAAD,CAAtB;AAIA,eAAeR,WAAf","sourcesContent":["import { combineReducers, createStore } from \"redux\";\nimport authReducer from './authReducer'; \n\n// import other reducers\nconst rootReducer = combineReducers({\n    // Key Value map of reducers\n    authUser: authReducer\n});\n\n//Store\nconst store = createStore(rootReducer);\n\n   //to update the state \n   store.subscribe(()=>{\n    for(var prop in store.getState())\n    {\n        console.warn('my redux: '+ prop[store.getState()])\n    }\n})\n\n    //Action for state\nconst addUser = text=>{\n    return{\n        type: \"SET_AUTH_TOKEN\",\n        payload: {auth: text}    \n    }\n}\n\n    //assigning the new value to the state\nstore.dispatch(addUser('1123'))\n\n\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}